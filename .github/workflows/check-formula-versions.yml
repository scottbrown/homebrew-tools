name: Check Formula Versions

on:
  schedule:
    - cron: '0 8 * * 1'  # Weekly on Mondays at 8 AM UTC
  workflow_dispatch:  # Allow manual triggering

jobs:
  check-versions:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'

      - name: Check formula versions
        run: |
          #!/bin/bash
          set -e
          
          outdated_formulas=()
          
          for formula in Formula/*.rb; do
            if [[ ! -f "$formula" ]]; then continue; fi
            
            formula_name=$(basename "$formula" .rb)
            echo "Checking $formula_name..."
            
            # Extract GitHub repo from formula
            repo=$(grep -o 'github.com[:/][^/]*/[^/"]*' "$formula" | head -n1 | sed 's/github.com[:/]//' | sed 's/\.git$//')
            
            if [[ -z "$repo" ]]; then
              echo "  ‚ö†Ô∏è  Could not find GitHub repo for $formula_name"
              continue
            fi
            
            echo "  Repository: $repo"
            
            # Get latest release from GitHub API
            latest_release=$(curl -s "https://api.github.com/repos/$repo/releases/latest" | jq -r '.tag_name // empty')
            
            if [[ -z "$latest_release" ]]; then
              echo "  ‚ö†Ô∏è  No releases found for $repo"
              continue
            fi
            
            # Extract version from formula
            formula_version=$(grep -E '^\s*version\s+' "$formula" | sed -E 's/^\s*version\s+"([^"]+)".*/\1/')
            
            if [[ -z "$formula_version" ]]; then
              echo "  ‚ö†Ô∏è  Could not extract version from $formula_name"
              continue
            fi
            
            echo "  Formula version: $formula_version"
            echo "  Latest release: $latest_release"
            
            # Compare versions (simple string comparison)
            if [[ "$formula_version" != "$latest_release" ]]; then
              echo "  ‚ùå OUTDATED: $formula_name ($formula_version ‚Üí $latest_release)"
              outdated_formulas+=("$formula_name: $formula_version ‚Üí $latest_release")
            else
              echo "  ‚úÖ UP TO DATE"
            fi
            
            echo ""
          done
          
          # Output results
          if [[ ${#outdated_formulas[@]} -eq 0 ]]; then
            echo "üéâ All formulas are up to date!"
          else
            echo "üìã Outdated formulas:"
            printf '%s\n' "${outdated_formulas[@]}"
            
            # Create issue or comment (optional)
            echo "OUTDATED_FORMULAS<<EOF" >> $GITHUB_ENV
            printf '%s\n' "${outdated_formulas[@]}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi

      - name: Create issue for outdated formulas
        if: env.OUTDATED_FORMULAS != ''
        uses: actions/github-script@v7
        with:
          script: |
            const outdated = process.env.OUTDATED_FORMULAS.trim();
            if (!outdated) return;
            
            const title = 'üîÑ Outdated Homebrew Formulas Detected';
            const body = `The following formulas are pointing to outdated versions:

            \`\`\`
            ${outdated}
            \`\`\`

            Please update the formulas to point to the latest releases.

            _This issue was automatically created by the version check workflow._`;

            // Check if issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['automated', 'outdated-formulas']
            });

            const existingIssue = issues.data.find(issue => issue.title === title);

            if (existingIssue) {
              // Update existing issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: body
              });
              console.log(`Updated existing issue #${existingIssue.number}`);
            } else {
              // Create new issue
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['automated', 'outdated-formulas']
              });
              console.log(`Created new issue #${issue.data.number}`);
            }
